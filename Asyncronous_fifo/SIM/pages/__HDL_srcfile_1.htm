
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>module</q-w> async_fifo_tb();
<a name="2"><q-n>     2  </q-n></a>
<a name="3"><q-n>     3  </q-n></a><q-w>parameter</q-w> DEP=16,
<a name="4"><q-n>     4  </q-n></a>	  DW=4;
<a name="5"><q-n>     5  </q-n></a><q-w>reg</q-w>           wclk,rclk,rstn,w_en,r_en;
<a name="6"><q-n>     6  </q-n></a><q-w>reg</q-w>  [DW-1:0] data_in;
<a name="7"><q-n>     7  </q-n></a><q-w>wire</q-w> [DW-1:0] data_out;
<a name="8"><q-n>     8  </q-n></a><q-w>wire</q-w>          full,empty,hf,amf,ame,of,uf;
<a name="9"><q-n>     9  </q-n></a><q-w>integer</q-w> i;
<a name="10"><q-n>     10  </q-n></a><q-m>//-----------------------------------------</q-m>
<a name="11"><q-n>     11  </q-n></a><q-w>reg</q-w> [DW-1:0] sfifo [0:DEP-1];
<a name="12"><q-n>     12  </q-n></a><q-w>reg</q-w> [DW:0] w_ptrs,r_ptrs,gw_ptrs,gr_ptrs;
<a name="13"><q-n>     13  </q-n></a><q-w>reg</q-w> [DW-1:0] sdout;
<a name="14"><q-n>     14  </q-n></a>async_fifo dut(.wclk(wclk),.rclk(rclk),.rstn(rstn),.w_en(w_en),.r_en(r_en),.data_in(data_in),.data_out(data_out),.full(full),.empty(empty),.hf(hf),.ame(ame),.amf(amf),.uf(uf),.of(of));
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>
<a name="17"><q-n>     17  </q-n></a><q-m>//------------------mimicing_the_design--------------------------</q-m>
<a name="18"><q-n>     18  </q-n></a> 
<a name="19"><q-n>     19  </q-n></a><q-w>initial</q-w> <q-w>begin</q-w>
<a name="20"><q-n>     20  </q-n></a> <q-w>forever</q-w> @(<q-a>posedge</q-w> wclk,<q-a>negedge</q-w> rstn) <q-w>begin</q-w>
<a name="21"><q-n>     21  </q-n></a>	<q-w>if</q-w>(!rstn)<q-w>begin</q-w>
<a name="22"><q-n>     22  </q-n></a>	  {w_ptrs,r_ptrs,sdout}='d0;
<a name="23"><q-n>     23  </q-n></a>          <q-w>for</q-w>(i=0;i&lt;DEP;i=i+1) <q-w>begin</q-w>
<a name="24"><q-n>     24  </q-n></a>            sfifo[i]&lt;=4'd0;
<a name="25"><q-n>     25  </q-n></a>          <q-w>end</q-w>
<a name="26"><q-n>     26  </q-n></a>        <q-w>end</q-w>
<a name="27"><q-n>     27  </q-n></a>  <q-w>else</q-w> <q-w>begin</q-w>
<a name="28"><q-n>     28  </q-n></a>	  gw_ptrs&lt;={w_ptrs[DW],w_ptrs[DW-1:1]^w_ptrs[DW-1:0]};
<a name="29"><q-n>     29  </q-n></a>	  <q-w>if</q-w> (w_en &amp;&amp; !full) <q-w>begin</q-w>
<a name="30"><q-n>     30  </q-n></a>	   sfifo[w_ptrs[DW-1:0]]&lt;=data_in;
<a name="31"><q-n>     31  </q-n></a>	   w_ptrs&lt;=w_ptrs+1'b1;
<a name="32"><q-n>     32  </q-n></a>	  <q-w>end</q-w>
<a name="33"><q-n>     33  </q-n></a>  <q-w>end</q-w> 
<a name="34"><q-n>     34  </q-n></a> <q-w>end</q-w>
<a name="35"><q-n>     35  </q-n></a><q-w>end</q-w>
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a><q-w>initial</q-w> <q-w>begin</q-w>
<a name="38"><q-n>     38  </q-n></a> <q-w>forever</q-w>@(<q-a>posedge</q-w> rclk,<q-a>negedge</q-w> rstn) <q-w>begin</q-w>
<a name="39"><q-n>     39  </q-n></a>	 <q-w>if</q-w> (!rstn) <q-w>begin</q-w>
<a name="40"><q-n>     40  </q-n></a>	   {w_ptrs,r_ptrs,sdout}='d0;
<a name="41"><q-n>     41  </q-n></a>           <q-w>for</q-w>(i=0;i&lt;DEP;i=i+1) <q-w>begin</q-w>
<a name="42"><q-n>     42  </q-n></a>             sfifo[i]&lt;=4'd0;
<a name="43"><q-n>     43  </q-n></a>           <q-w>end</q-w>
<a name="44"><q-n>     44  </q-n></a>         <q-w>end</q-w>
<a name="45"><q-n>     45  </q-n></a>	 <q-w>else</q-w> <q-w>begin</q-w>
<a name="46"><q-n>     46  </q-n></a>	  gr_ptrs&lt;={r_ptrs[DW],r_ptrs[DW-1:1]^r_ptrs[DW-1:0]};
<a name="47"><q-n>     47  </q-n></a>	  <q-w>if</q-w>(r_en &amp;&amp; !empty) <q-w>begin</q-w>
<a name="48"><q-n>     48  </q-n></a>	    sdout&lt;=sfifo[r_ptrs[DW-1:0]];
<a name="49"><q-n>     49  </q-n></a>	    r_ptrs&lt;=r_ptrs+1'b1;
<a name="50"><q-n>     50  </q-n></a>	  <q-w>end</q-w>
<a name="51"><q-n>     51  </q-n></a>	 <q-w>end</q-w>
<a name="52"><q-n>     52  </q-n></a> <q-w>end</q-w>
<a name="53"><q-n>     53  </q-n></a><q-w>end</q-w>
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a>
<a name="56"><q-n>     56  </q-n></a><q-m>//---------------------------CHECKER------------------------------------------</q-m>
<a name="57"><q-n>     57  </q-n></a><q-w>initial</q-w> <q-w>begin</q-w>
<a name="58"><q-n>     58  </q-n></a>	<q-w>forever</q-w> @(sdout,data_out) <q-w>begin</q-w>
<a name="59"><q-n>     59  </q-n></a>	 <q-w>if</q-w>(sdout==data_out) $display(<q-l>"DATA OUT TEST is PASSED!! @ %t"</q-l>,$<q-w>time</q-w>);
<a name="60"><q-n>     60  </q-n></a>	 <q-w>else</q-w> $display(<q-l>"DATA OUT TEST IS FAILED @ %t"</q-l>,$<q-w>time</q-w>);
<a name="61"><q-n>     61  </q-n></a>	<q-w>end</q-w>
<a name="62"><q-n>     62  </q-n></a><q-w>end</q-w>
<a name="63"><q-n>     63  </q-n></a> <q-m>//----------------------------------------------------------------------------</q-m>
<a name="64"><q-n>     64  </q-n></a>
<a name="65"><q-n>     65  </q-n></a>
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a><q-m>//--------------------------------------------------------------</q-m>
<a name="69"><q-n>     69  </q-n></a>
<a name="70"><q-n>     70  </q-n></a><q-w>initial</q-w> <q-w>forever</q-w> #5 wclk=~wclk;
<a name="71"><q-n>     71  </q-n></a><q-w>initial</q-w> <q-w>forever</q-w> #10 rclk=~rclk;
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a><q-w>initial</q-w> <q-w>begin</q-w>
<a name="74"><q-n>     74  </q-n></a>wclk=1'b1;
<a name="75"><q-n>     75  </q-n></a>rclk=1'b1;
<a name="76"><q-n>     76  </q-n></a><q-w>if</q-w>($test$plusargs(<q-l>"sanity_test"</q-l>)) <q-w>begin</q-w>
<a name="77"><q-n>     77  </q-n></a> reset();
<a name="78"><q-n>     78  </q-n></a> dinR(16);
<a name="79"><q-n>     79  </q-n></a> data_read(16);
<a name="80"><q-n>     80  </q-n></a> <q-w>repeat</q-w> (10) @(<q-a>negedge</q-w> wclk);
<a name="81"><q-n>     81  </q-n></a><q-w>end</q-w>
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a><q-w>if</q-w>($test$plusargs(<q-l>"mix_test"</q-l>)) <q-w>begin</q-w>
<a name="84"><q-n>     84  </q-n></a> <q-m>//reset();</q-m>
<a name="85"><q-n>     85  </q-n></a> dinR(8);
<a name="86"><q-n>     86  </q-n></a> data_read(8);
<a name="87"><q-n>     87  </q-n></a> dinR(3);
<a name="88"><q-n>     88  </q-n></a> data_read(8);
<a name="89"><q-n>     89  </q-n></a> <q-w>repeat</q-w> (10) @(<q-a>negedge</q-w> wclk);
<a name="90"><q-n>     90  </q-n></a><q-w>end</q-w>
<a name="91"><q-n>     91  </q-n></a><q-w>if</q-w>($test$plusargs(<q-l>"simul_r_w"</q-l>)) <q-w>begin</q-w>
<a name="92"><q-n>     92  </q-n></a>	reset();
<a name="93"><q-n>     93  </q-n></a> dinR(10);
<a name="94"><q-n>     94  </q-n></a> data_read(3);
<a name="95"><q-n>     95  </q-n></a> <q-w>fork</q-w>
<a name="96"><q-n>     96  </q-n></a>  dinR(6);
<a name="97"><q-n>     97  </q-n></a>  data_read(16);
<a name="98"><q-n>     98  </q-n></a> <q-w>join</q-w>
<a name="99"><q-n>     99  </q-n></a> <q-w>repeat</q-w>(10) @(<q-a>negedge</q-w> wclk);
<a name="100"><q-n>     100  </q-n></a>
<a name="101"><q-n>     101  </q-n></a><q-w>end</q-w>
<a name="102"><q-n>     102  </q-n></a>$finish;
<a name="103"><q-n>     103  </q-n></a><q-w>end</q-w>
<a name="104"><q-n>     104  </q-n></a>
<a name="105"><q-n>     105  </q-n></a><q-w>task</q-w> reset();
<a name="106"><q-n>     106  </q-n></a><q-w>begin</q-w>
<a name="107"><q-n>     107  </q-n></a> rstn=1'b0;
<a name="108"><q-n>     108  </q-n></a> {w_en,r_en}=2'd0;
<a name="109"><q-n>     109  </q-n></a> @(<q-a>negedge</q-w> wclk);
<a name="110"><q-n>     110  </q-n></a> rstn=1'b1;
<a name="111"><q-n>     111  </q-n></a><q-w>end</q-w>
<a name="112"><q-n>     112  </q-n></a><q-w>endtask</q-w>
<a name="113"><q-n>     113  </q-n></a>
<a name="114"><q-n>     114  </q-n></a><q-w>task</q-w> dinR(<q-w>input</q-w> <q-w>integer</q-w> in);
<a name="115"><q-n>     115  </q-n></a> <q-w>begin</q-w>
<a name="116"><q-n>     116  </q-n></a>   <q-w>for</q-w>(i=0;i&lt;in;i=i+1) <q-w>begin</q-w>
<a name="117"><q-n>     117  </q-n></a>   @(<q-a>negedge</q-w> wclk);
<a name="118"><q-n>     118  </q-n></a>   w_en=1'b1;
<a name="119"><q-n>     119  </q-n></a>   data_in={$random}%256;
<a name="120"><q-n>     120  </q-n></a>   <q-w>end</q-w>
<a name="121"><q-n>     121  </q-n></a>   @(<q-a>negedge</q-w> wclk);
<a name="122"><q-n>     122  </q-n></a>   w_en=1'b0;
<a name="123"><q-n>     123  </q-n></a> <q-w>end</q-w>
<a name="124"><q-n>     124  </q-n></a><q-w>endtask</q-w>
<a name="125"><q-n>     125  </q-n></a>
<a name="126"><q-n>     126  </q-n></a><q-w>task</q-w> data_read(<q-w>input</q-w> <q-w>integer</q-w> n);
<a name="127"><q-n>     127  </q-n></a>	<q-w>begin</q-w>
<a name="128"><q-n>     128  </q-n></a>	   @(<q-a>negedge</q-w> rclk);
<a name="129"><q-n>     129  </q-n></a>	   r_en=1'b1;
<a name="130"><q-n>     130  </q-n></a>           <q-w>repeat</q-w>(n) @(<q-a>negedge</q-w> rclk);
<a name="131"><q-n>     131  </q-n></a>	   r_en=1'b0;
<a name="132"><q-n>     132  </q-n></a>	<q-w>end</q-w>
<a name="133"><q-n>     133  </q-n></a><q-w>endtask</q-w>
<a name="134"><q-n>     134  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>
